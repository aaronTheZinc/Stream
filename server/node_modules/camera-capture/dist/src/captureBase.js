"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const misc_utils_of_mine_generic_1 = require("misc-utils-of-mine-generic");
const os_1 = require("os");
const path_1 = require("path");
const puppeteer_1 = __importDefault(require("puppeteer"));
const staticServer_1 = require("./staticServer");
class CaptureBase {
    constructor(o = {}) {
        this.o = o;
    }
    async stop() {
        await misc_utils_of_mine_generic_1.sleep(500);
        await this.page.close();
        await misc_utils_of_mine_generic_1.sleep(500);
        await this.browser.close();
        await misc_utils_of_mine_generic_1.sleep(500);
        await this.server.close();
        await misc_utils_of_mine_generic_1.sleep(500);
    }
    async initialize() {
        const dir = this.o.mkdirServed === true ? path_1.join(os_1.tmpdir(), 'camera-capture') : typeof this.o.mkdirServed === 'string' ? this.o.mkdirServed : __dirname;
        if (this.o.mkdirServed && !fs_1.existsSync(path_1.join(dir, 'index.html'))) {
            fs_1.mkdirSync(dir, { recursive: true });
            fs_1.writeFileSync(path_1.join(dir, 'index.html'), fs_1.readFileSync(fs_1.realpathSync(path_1.join(__dirname, 'index.html'))));
        }
        try {
            this.server = await staticServer_1.staticServer(dir, this.o.port || 8080);
            this.o.debug && console.log('Serving index.html on port ' + (this.o.port || 8080) + '. Folder: "' + dir + '"');
        }
        catch (error) {
            console.error('Error while opening server on port ' + (this.o.port || 8080) + '. Folder: "' + dir + '": ', error, error.stack);
        }
        const pOptions = misc_utils_of_mine_generic_1.mergeRecursive({
            ...{},
            ...this.o.puppeteerOptions
        }, {
            headless: true,
            args: ['--disable-web-security', '--allow-file-access', '--use-fake-ui-for-media-stream', ...this.o.puppeteerOptions && this.o.puppeteerOptions.args || []].filter(misc_utils_of_mine_generic_1.notSameNotFalsy)
        });
        this.o.debug && console.log(`Puppeteer options: ${JSON.stringify(pOptions)}`);
        this.browser = await puppeteer_1.default.launch(pOptions);
        this.page = await this.browser.newPage();
        this.page.on('console', e => {
            if (e.type() === 'error') {
                console.error('error: ' + JSON.stringify(e.location()) + '\n' + e.text().split('\n').join('\n'));
            }
            console.log('log: ' + JSON.stringify(e.location()) + '\n' + e.text());
        });
        this.o.debug && console.log(`Opening address '${`http://127.0.0.1:${this.o.port || 8080}/index.html`}'`);
        await this.page.goto(`http://127.0.0.1:${this.o.port || 8080}/index.html`);
        await misc_utils_of_mine_generic_1.sleep(500);
    }
}
exports.CaptureBase = CaptureBase;
//# sourceMappingURL=captureBase.js.map